# a build with no CI
trigger: none

jobs:
- job: NetCore_EventGrid_HTTP_Function_Build_and_Deploy
  pool:
    name: Hosted VS2017
    demands: 
    - msbuild
    - visualstudio
    - vstest

  variables:
    ConnectedServiceName_local: $(ConnectedServiceName)
    WebAppType_local: $(WebAppType)
    WebAppName_local: $(WebAppName)
    namePrefix_local: $(namePrefix)

  steps:
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: 'src/ConstosoTravel.Web.Function.EventGrid/Function.EventGrid.csproj'
      workingDirectory: 'src/'
  
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: 'src/ConstosoTravel.Web.Function.EventGrid/Function.EventGrid.csproj'
      arguments: '--configuration Release'
      workingDirectory: 'src/'
  
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      arguments: 'ConstosoTravel.Web.Function.EventGrid/Function.EventGrid.csproj --configuration Release --output $(build.artifactstagingdirectory)'
      zipAfterPublish: True
      workingDirectory: 'src/'
  
  - task: AzureRmWebAppDeployment@3
    displayName: 'Azure App Service Deploy: ${{ variables.WebAppType_local }} - ${{ variables.WebAppName_local }}'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      appType: '$(WebAppType_local)'
      WebAppName: '$(WebAppName_local)'
      Package: '$(build.artifactstagingdirectory)/**/*.zip'
      TakeAppOfflineFlag: true
      UseWebDeploy: true
      RemoveAdditionalFilesFlag: true

  - task: AzureCLI@1
    displayName: 'Azure CLI - Running configuration.ps1 and Deploy'
    inputs:
      azureSubscription: '${{ variables.ConnectedServiceName_local }}'
      scriptLocation: inlineScript
      inlineScript: |
        $sub=(az account show --query id --output tsv)
        $url=(az keyvault secret show --vault-name "kv${{ variables.namePrefix_local }}" --name "ContosoTravel--ServiceFQDN" --query value --output tsv)
        $topicId=(az eventgrid topic list --resource-group rg-{{ variables.namePrefix_local }} --subscription $sub --query [].id --output tsv)
        az eventgrid event-subscription create --name {{ variables.namePrefix_local }}PurchaseItinerarySub --source-resource-id $topicId --endpoint $url
      workingDirectory: $(Build.sourcesDirectory)      
    condition: and(always(), eq(variables['eventing'], 'eventgrid'))